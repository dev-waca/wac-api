generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//#region User Model
model User {
  id        BigInt   @id @default(autoincrement())
  email     String   @unique
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  passwords     Password[]
  userSignLogs  UserSignLog[]
  calendarUsers CalendarUser[]
  events        Event[]
  calendars     Calendar[]
}

model Password {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  hash      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSignLog {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  isFailed  Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerification {
  id         BigInt   @id @default(autoincrement())
  email      String
  code       String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

//#endregion

//#region Common
model File {
  id        BigInt   @id @default(autoincrement())
  name      String
  hash      String
  path      String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//#endregion

//#region Calendar Model
model Calendar {
  id        BigInt   @id @default(autoincrement())
  title     String
  memo      String
  userId    BigInt?
  createdAt DateTime @default(now())

  user   User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  events Event[]
  users  CalendarUser[]
}

model CalendarUser {
  id         BigInt   @id @default(autoincrement())
  calendarId BigInt
  userId     BigInt
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  calendar Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([calendarId, userId])
}

model Event {
  id            BigInt    @id @unique(sort: Desc) @default(autoincrement())
  calendarId    BigInt
  userId        BigInt?
  targetEventId BigInt? // 부모 이벤트 키
  title         String
  memo          String?
  isAllDay      Boolean   @default(false)
  start         DateTime
  end           DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  calendar    Calendar     @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  user        User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  repeat      RepeatEvent?
  targetEvent Event?       @relation("EventToEvent", fields: [targetEventId], references: [id], onDelete: SetNull) // 덮어 쓴 일정
  coverEvents Event[]      @relation("EventToEvent") // 덮어 씌워진 일정들

  @@index([calendarId, userId])
}

model RepeatEvent {
  eventId      BigInt   @id @unique
  repeatType   String // D - Day, W - Week, M - Month, Y - Year
  repeatNumber Int
  byWeek       Int?
  byDay        Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

//#endregion
